<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>text on Nguyễn Hữu Trưởng</title>
        <link>https://truongnh28.github.io/tags/text/</link>
        <description>Recent content in text on Nguyễn Hữu Trưởng</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 14 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://truongnh28.github.io/tags/text/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Class diagram UML</title>
        <link>https://truongnh28.github.io/p/class-diagram-uml/</link>
        <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://truongnh28.github.io/p/class-diagram-uml/</guid>
        <description>&lt;img src="https://truongnh28.github.io/p/class-diagram-uml/p18.png" alt="Featured image of post Class diagram UML" /&gt;&lt;h1 id=&#34;class-diagram&#34;&gt;Class diagram&lt;/h1&gt;
&lt;h2 id=&#34;giới-thiệu&#34;&gt;Giới thiệu&lt;/h2&gt;
&lt;p&gt;Sơ đồ lớp (UML) là một ký hiệu đồ họa sử dụng để trực quan hóa các hệ thống hướng đối tượng. Sơ đồ lớp trong UML là một loại sơ đồ cấu trúc tĩnh mô tả cấu trúc của hệ thống bằng cách hiển thị các thành phần của các thành phần hệ thống:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Các lớp&lt;/li&gt;
&lt;li&gt;Các thuộc tính của lớp.&lt;/li&gt;
&lt;li&gt;Các phương thức của lớp.&lt;/li&gt;
&lt;li&gt;Các quan hệ giữa các đối tượng.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;class-là-cái-vẹo-gì&#34;&gt;Class là cái vẹo gì?&lt;/h3&gt;
&lt;p&gt;Class là một bản thiết kế cho một đối tượng. Các đối tượng và class luôn đi đôi với nhau. Chúng ta không thể nói cái này mà không có cái kia. Và toàn bộ điểm của thiết kế hướng đối tượng không phải nói đến các đối tượng mà nó nói đến class bởi vì chúng ta sử dụng class để tạo ra các đối tượng. Nên một class sẽ mô tả một đối tượng nó như thế nào nhưng bản thân của class không phải là một đối tượng.&lt;/p&gt;
&lt;p&gt;Trong thực tế, các class mô tả các kiểu của đối tượng, trong khi các đối tượng là thể hiện của các class. Mỗi đối tượng được xây dựng từ các bản thiết kế do đó nó chứa các phương thức và thuộc tính giống nhau. Ý nghĩa tiêu chuẩn là một đối tượng là một thể hiện của một lớp và các đối tượng có trạng thái và hành vi.&lt;/p&gt;
&lt;p&gt;Ví dụ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p1.png&#34;
	width=&#34;633&#34;
	height=&#34;448&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p1_huda241e34f4e0d83cd8c4038771d04829_31169_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p1_huda241e34f4e0d83cd8c4038771d04829_31169_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;ví dụ&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;ký-hiệu-của-uml-class&#34;&gt;Ký hiệu của UML Class&lt;/h2&gt;
&lt;p&gt;Một class đại diện cho một khái niệm bao gồm thuộc tính (attributes) và hành vi(behavior). Mỗi thuộc tính có một kiểu và một hành vi mỗi hành vi có một chữ ký. Tên lớp là thông tin bắt buộc duy nhất.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p2.png&#34;
	width=&#34;676&#34;
	height=&#34;253&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p2_hu361d41e5f32884b2671e5199f88d5a48_38146_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p2_hu361d41e5f32884b2671e5199f88d5a48_38146_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;&amp;#34;&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;267&#34;
		data-flex-basis=&#34;641px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tên lớp:
&lt;ul&gt;
&lt;li&gt;Tên của lớp xuất hiện trong phân vùng đầu tiên.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thuộc tính lớp(Attributes):
&lt;ul&gt;
&lt;li&gt;Các thuộc tính được hiển thị trong phân vùng thứ hai.&lt;/li&gt;
&lt;li&gt;Loại thuộc tính được hiển thị sau dấu hai chấm.&lt;/li&gt;
&lt;li&gt;Các thuộc tính ánh xạ lên các biến thành viên (thành viên dữ liệu) trong mã.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hoạt động lớp(Operations) (Phương thức):
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Các hoạt động được hiển thị trong phân vùng thứ ba. Chúng là những dịch vụ mà lớp học cung cấp.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kiểu trả về của một phương thức được hiển thị sau dấu hai chấm ở cuối chữ ký phương thức.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kiểu trả về của các tham số phương thức được hiển thị sau dấu hai chấm theo sau tên tham số. Các phép toán ánh xạ vào các phương thức lớp trong code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p3.png&#34;
	width=&#34;676&#34;
	height=&#34;253&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p3_huedb92e202f8c6fef211cf287afcc47d8_50462_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p3_huedb92e202f8c6fef211cf287afcc47d8_50462_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;267&#34;
		data-flex-basis=&#34;641px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Hiển thị Lớp học
Các ký hiệu +, - và # trước tên thuộc tính và hoạt động trong một lớp biểu thị khả năng hiển thị của thuộc tính và hoạt động.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p4.png&#34;
	width=&#34;482&#34;
	height=&#34;253&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p4_hu06816d78b83e80e4236a3930fc5d23e0_40625_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p4_hu06816d78b83e80e4236a3930fc5d23e0_40625_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;190&#34;
		data-flex-basis=&#34;457px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;+&amp;rdquo; biểu thị các thuộc tính hoặc hoạt động public&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-&amp;rdquo; biểu thị các thuộc tính hoặc hoạt động private&lt;/li&gt;
&lt;li&gt;&amp;ldquo;#&amp;rdquo; biểu thị các thuộc tính hoặc hoạt động protected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tham số hướng&lt;/p&gt;
&lt;p&gt;Mỗi tham số trong một hoạt động (phương thức) có thể được ký hiệu là in, out hoặc inout, chỉ định hướng của nó đối với người gọi. Hướng này được hiển thị trước tên tham số.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p5.png&#34;
	width=&#34;632&#34;
	height=&#34;305&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p5_hu3817333d8d211b7c5edfe3f7e161960f_52914_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p5_hu3817333d8d211b7c5edfe3f7e161960f_52914_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;497px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;phối-cảnh-của-sơ-đồ-lớp&#34;&gt;Phối cảnh của Sơ đồ lớp&lt;/h2&gt;
&lt;p&gt;Việc lựa chọn quan điểm phụ thuộc vào việc bạn đã đi được bao xa trong quá trình phát triển. Ví dụ, trong quá trình xây dựng mô hình miền, bạn sẽ hiếm khi vượt qua quan điểm khái niệm. Các mô hình phân tích thường sẽ có sự kết hợp giữa quan điểm khái niệm và đặc điểm kỹ thuật. Việc phát triển mô hình thiết kế thường sẽ bắt đầu với sự nhấn mạnh nhiều vào quan điểm đặc tả, và phát triển thành quan điểm thực hiện.&lt;/p&gt;
&lt;p&gt;Một sơ đồ có thể được giải thích từ nhiều khía cạnh khác nhau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Khái niệm: đại diện cho các khái niệm trong miền&lt;/li&gt;
&lt;li&gt;Đặc điểm kỹ thuật: tập trung vào các giao diện của Kiểu dữ liệu trừu tượng (ADT) trong phần mềm&lt;/li&gt;
&lt;li&gt;Triển khai: mô tả cách các lớp sẽ triển khai các giao diện của chúng&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quan điểm ảnh hưởng đến số lượng chi tiết được cung cấp và các loại mối quan hệ đáng trình bày. Như chúng tôi đã đề cập ở trên, tên lớp là thông tin bắt buộc duy nhất.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p6.png&#34;
	width=&#34;1009&#34;
	height=&#34;274&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p6_hu5d0fdabea17df99e97751377671ceb75_65440_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p6_hu5d0fdabea17df99e97751377671ceb75_65440_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;368&#34;
		data-flex-basis=&#34;883px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;mối-quan-hệ-giữa-các-lớp&#34;&gt;Mối quan hệ giữa các lớp&lt;/h2&gt;
&lt;p&gt;UML không chỉ là về những bức ảnh đẹp. Nếu được sử dụng đúng cách, UML sẽ truyền tải chính xác cách mã nên được triển khai từ các sơ đồ. Nếu được diễn giải chính xác, mã được triển khai sẽ phản ánh đúng ý định của nhà thiết kế. Bạn có thể mô tả ý nghĩa của từng mối quan hệ so với ngôn ngữ lập trình mục tiêu của bạn được hiển thị trong Hình bên dưới không?&lt;/p&gt;
&lt;p&gt;Nếu bạn vẫn chưa thể nhận ra chúng, không có vấn đề gì phần này nhằm giúp bạn hiểu các mối quan hệ lớp UML. Một lớp có thể tham gia vào một hoặc nhiều mối quan hệ với các lớp khác. Mối quan hệ có thể là một trong các loại sau:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p7.png&#34;
	width=&#34;484&#34;
	height=&#34;445&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p7_hu702add68cc14d06ae8376727328149bc_30117_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p7_hu702add68cc14d06ae8376727328149bc_30117_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;261px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Kế thừa (hoặc Tổng quát):&lt;/p&gt;
&lt;p&gt;Tổng quát hóa là một mối quan hệ phân loại giữa một bộ phân loại tổng quát hơn và một bộ phân loại cụ thể hơn. Mỗi thể hiện của trình phân loại cụ thể cũng là một thể hiện gián tiếp của trình phân loại chung. Do đó, trình phân loại cụ thể kế thừa các tính năng của trình phân loại tổng quát hơn.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p8.png&#34;
	width=&#34;307&#34;
	height=&#34;230&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p8_hu5a7c7d44d8ec9c757e8dcc8afaca41a5_9624_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p8_hu5a7c7d44d8ec9c757e8dcc8afaca41a5_9624_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
Ví dụ:
Hình dưới đây cho thấy một ví dụ kế thừa với hai kiểu. Mặc dù các đầu nối được vẽ khác nhau nhưng chúng tương đương nhau về mặt ngữ nghĩa.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p9.png&#34;
	width=&#34;411&#34;
	height=&#34;494&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p9_hu8cdc01f72e31ac8b1c04b8bf2f15166e_31700_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p9_hu8cdc01f72e31ac8b1c04b8bf2f15166e_31700_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;83&#34;
		data-flex-basis=&#34;199px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sự kết hợp&lt;/p&gt;
&lt;p&gt;Liên kết là mối quan hệ giữa các lớp trong một Sơ đồ lớp UML. Chúng được biểu diễn bằng một đường liền nét giữa các lớp. Các liên kết thường được đặt tên bằng cách sử dụng một động từ hoặc cụm động từ phản ánh lĩnh vực vấn đề trong thế giới thực.&lt;/p&gt;
&lt;p&gt;a. Hiệp hội đơn giản&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Một liên kết cấu trúc giữa hai lớp đồng đẳng.&lt;/li&gt;
&lt;li&gt;Có sự liên kết giữa Class1 và Class2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hình dưới đây cho thấy một ví dụ về liên kết đơn giản. Có một liên kết kết nối lớp &amp;laquo;control&amp;raquo; lớp Class1 và lớp &amp;laquo;boundary&amp;raquo; lớp Class2. Mối quan hệ được hiển thị như một đường liền mạch nối hai lớp.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p10.png&#34;
	width=&#34;323&#34;
	height=&#34;138&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p10_hu1c5e70b195d02a6ceb1f0003600602db_7819_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p10_hu1c5e70b195d02a6ceb1f0003600602db_7819_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;234&#34;
		data-flex-basis=&#34;561px&#34;
	
&gt;
b. Cardinality&lt;/p&gt;
&lt;p&gt;Cardinality được thể hiện dưới dạng:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Một - Một&lt;/li&gt;
&lt;li&gt;Một - Nhiều&lt;/li&gt;
&lt;li&gt;Nhiều - Nhiều.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p12.png&#34;
	width=&#34;420&#34;
	height=&#34;349&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p12_hu23c779a8d1848d3769cdf31b2c52d2fe_22453_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p12_hu23c779a8d1848d3769cdf31b2c52d2fe_22453_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;288px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aggregation Tổng hợp
Một kiểu liên kết đặc biệt.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nó đại diện cho một mối quan hệ &amp;ldquo;một phần của&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Class2 là một phần của Class1.&lt;/li&gt;
&lt;li&gt;Nhiều phiên bản (ký hiệu là *) của Class2 có thể được liên kết với Class1.&lt;/li&gt;
&lt;li&gt;Các đối tượng của Class1 và Class2 có vòng đời riêng biệt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hình dưới đây cho thấy một ví dụ về tập hợp. Mối quan hệ được hiển thị dưới dạng một đường liền nét với một viên kim cương chưa được lấp đầy ở đầu kết hợp, được kết nối với lớp đại diện cho tổng thể.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p11.png&#34;
	width=&#34;314&#34;
	height=&#34;142&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p11_hu553f86cb5e09149290dd50897d21527c_8998_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p11_hu553f86cb5e09149290dd50897d21527c_8998_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;530px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Composition&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Một kiểu tập hợp đặc biệt mà các bộ phận bị phá hủy khi toàn bộ bị phá hủy.&lt;/li&gt;
&lt;li&gt;Các đối tượng của Class2 sống chết với Class1.&lt;/li&gt;
&lt;li&gt;Class2 không thể tự đứng.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hình dưới đây cho thấy một ví dụ về bố cục. Mối quan hệ được hiển thị dưới dạng một đường liền nét với một viên kim cương được lấp đầy ở đầu kết hợp, được kết nối với lớp đại diện cho toàn bộ hoặc kết hợp.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p13.png&#34;
	width=&#34;307&#34;
	height=&#34;115&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p13_hu254d7ad2b93eb52f2e883e58d94c3237_8671_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p13_hu254d7ad2b93eb52f2e883e58d94c3237_8671_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;640px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency
Một đối tượng của một lớp có thể sử dụng một đối tượng của lớp khác trong mã của một phương thức. Nếu đối tượng không được lưu trữ trong bất kỳ trường nào, thì đối tượng này được mô hình hóa như một mối quan hệ phụ thuộc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Một kiểu liên kết đặc biệt.&lt;/li&gt;
&lt;li&gt;Tồn tại giữa hai lớp nếu những thay đổi đối với định nghĩa của một lớp có thể gây ra những thay đổi cho lớp kia (nhưng không phải ngược lại).&lt;/li&gt;
&lt;li&gt;Class1 phụ thuộc vào Class2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hình dưới đây cho thấy một ví dụ về sự phụ thuộc. Mối quan hệ được hiển thị dưới dạng đường đứt nét với một mũi tên mở.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p14.png&#34;
	width=&#34;307&#34;
	height=&#34;115&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p14_hu16264f52ae8c80b7e78185c69f388ba2_8577_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p14_hu16264f52ae8c80b7e78185c69f388ba2_8577_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;640px&#34;
	
&gt;
Hình dưới đây cho thấy một ví dụ khác về sự phụ thuộc. Lớp Person có thể có phương thức hasRead với tham số Book trả về true nếu người đó đã đọc sách (có thể bằng cách kiểm tra một số cơ sở dữ liệu).
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p15.png&#34;
	width=&#34;424&#34;
	height=&#34;115&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p15_hu2eb0df88a5f1cb0516d0ff4d338f37fd_9023_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p15_hu2eb0df88a5f1cb0516d0ff4d338f37fd_9023_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;368&#34;
		data-flex-basis=&#34;884px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Realization (Hiện thực hóa)
Hiện thực hóa là một mối quan hệ giữa lớp kế hoạch chi tiết và đối tượng chứa các chi tiết mức độ thực thi tương ứng của nó. Đối tượng này được cho là nhận ra lớp kế hoạch chi tiết. Nói cách khác, bạn có thể hiểu đây là mối quan hệ giữa interface và lớp thực thi.&lt;/p&gt;
&lt;p&gt;Ví dụ: giao diện Chủ sở hữu có thể chỉ định các phương pháp mua tài sản và định đoạt tài sản. Các lớp Person và Corporation cần triển khai các phương thức này, có thể theo những cách rất khác nhau.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p16.png&#34;
	width=&#34;465&#34;
	height=&#34;347&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p16_hu28abcf3aa3d19c15ffc143c74c6d3dbb_29902_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p16_hu28abcf3aa3d19c15ffc143c74c6d3dbb_29902_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;
Ví dụ: Sơ đồ lớp Hệ thống đặt hàng.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p17.png&#34;
	width=&#34;1109&#34;
	height=&#34;630&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p17_hue28ca8afe65c23b87d61849c432ad7f0_121682_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p17_hue28ca8afe65c23b87d61849c432ad7f0_121682_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;422px&#34;
	
&gt;
Ví dụ: Sơ đồ lớp: GUI
Sơ đồ lớp cũng có thể có các ghi chú đính kèm với các lớp hoặc các mối quan hệ.
&lt;img src=&#34;https://truongnh28.github.io/p/class-diagram-uml/p18.png&#34;
	width=&#34;1097&#34;
	height=&#34;555&#34;
	srcset=&#34;https://truongnh28.github.io/p/class-diagram-uml/p18_hu677a00736f2dcfd7487ef442f4d9b9a7_160760_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/class-diagram-uml/p18_hu677a00736f2dcfd7487ef442f4d9b9a7_160760_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34; &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;474px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tham-khảo&#34;&gt;Tham khảo&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;visual-paradigm&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>System Design Project</title>
        <link>https://truongnh28.github.io/p/system-design-project/</link>
        <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://truongnh28.github.io/p/system-design-project/</guid>
        <description>&lt;img src="https://truongnh28.github.io/p/system-design-project/system_design.png" alt="Featured image of post System Design Project" /&gt;&lt;h2 id=&#34;đề-bài-thiết-kế-một-hệ-thống-web-blog-với-khả-năng-chịu-tải-10000-request-trên-giây&#34;&gt;Đề bài: Thiết kế một hệ thống web blog với khả năng chịu tải 10000 request trên giây.&lt;/h2&gt;
&lt;h2 id=&#34;bài-làm&#34;&gt;Bài làm&lt;/h2&gt;
&lt;h3 id=&#34;phát-thảo-các-trường-hợp-sử-dụng-và-các-ràng-buộc&#34;&gt;Phát thảo các trường hợp sử dụng và các ràng buộc&lt;/h3&gt;
&lt;h4 id=&#34;trường-hợp-sử-dụng&#34;&gt;Trường hợp sử dụng&lt;/h4&gt;
&lt;p&gt;Ta sẽ giải quyết các trường hợp sau:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Người dùng thực hiện yêu cầu đọc hoặc ghi
&lt;ul&gt;
&lt;li&gt;Dịch vụ xử lý, lưu trữ dữ liệu người dùng sau đó trả kết quả.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hệ thống có tính chịu tải lớn.&lt;/li&gt;
&lt;li&gt;Hệ thống có tính khả dụng cao.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hạn-chế-và-giả-định&#34;&gt;Hạn chế và giả định&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Giả định trạng thái&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lưu lượng truy cập phân bố không đồng đều.&lt;/li&gt;
&lt;li&gt;Cần cơ sở dữ liệu quan hệ.&lt;/li&gt;
&lt;li&gt;Quy mô từ 1 đến hàng triệu người dùng.&lt;/li&gt;
&lt;li&gt;1 triệu người dùng.&lt;/li&gt;
&lt;li&gt;1 triệu lượt viết mỗi tháng.&lt;/li&gt;
&lt;li&gt;500 triệu lượt đọc mỗi tháng&lt;/li&gt;
&lt;li&gt;Tỷ lệ đọc ghi là: 500 : 1&lt;/li&gt;
&lt;li&gt;Dung lượng khoảng 500kb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tính toán mức sử dụng&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;476 GB nội dung mỗi tháng.
&lt;ul&gt;
&lt;li&gt;500 KB * 1000000 lần ghi mỗi tháng.&lt;/li&gt;
&lt;li&gt;Giả sử hầu hết các bài viết là nội dung mới thay vì cập nhật những nội dung đã có.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trung bình 10 giây thì có 4 lần viết.&lt;/li&gt;
&lt;li&gt;Trung bình 1 giây thì có 200 lần đọc.&lt;/li&gt;
&lt;li&gt;10000 request mỗi giây -&amp;gt; 25000000000 request mỗi tháng.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;thiết-kế-ở-mức-cao-hơn&#34;&gt;Thiết kế ở mức cao hơn&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/system-design-project/basic_architechture.png&#34;
	width=&#34;401&#34;
	height=&#34;281&#34;
	srcset=&#34;https://truongnh28.github.io/p/system-design-project/basic_architechture_hu32418e4422083833936aa38319430550_14227_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/system-design-project/basic_architechture_hu32418e4422083833936aa38319430550_14227_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Bản thiết kế với số lượng người dùng nhỏ&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;thiết-kế-các-thanh-phần-cốt-lõi&#34;&gt;Thiết kế các thanh phần cốt lõi&lt;/h3&gt;
&lt;p&gt;Người dùng yêu cầu đọc hoặc ghi.&lt;/p&gt;
&lt;p&gt;Với số lượng người dùng nhỏ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chỉ cần một Web Server duy nhất.&lt;/li&gt;
&lt;li&gt;Có thể dùng vertical scaling khi cần thiết.&lt;/li&gt;
&lt;li&gt;Giám sát để xử lý hệ thống nếu xảy ra hiện tượng tắt nghẽn.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Một Web Server duy nhất:
&lt;ul&gt;
&lt;li&gt;Lưu trữ dữ liệu của người dùng.&lt;/li&gt;
&lt;li&gt;Xử lý các yêu cầu.&lt;/li&gt;
&lt;li&gt;Lưu trữ database MySQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sử dụng vertical scaling:
&lt;ul&gt;
&lt;li&gt;Đơn giản chỉ cần chọn một hộp lớn hơn.&lt;/li&gt;
&lt;li&gt;Theo dõi các chỉ số để xác định cách mở rộng quy mô.&lt;/li&gt;
&lt;li&gt;Sử dụng giám sát cơ bản để xác định tắc nghẽn: CPU, bộ nhớ, IO, mạng, v.v.&lt;/li&gt;
&lt;li&gt;Mở rộng quy mô theo chiều dọc có thể rất tốn kém.&lt;/li&gt;
&lt;li&gt;Không có backup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cơ sở dữ liệu MySQL:
&lt;ul&gt;
&lt;li&gt;Các ràng buộc cần có cơ sở dữ liệu quan hệ.&lt;/li&gt;
&lt;li&gt;Dùng MySQL chung trên Web Server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS
&lt;ul&gt;
&lt;li&gt;Gán IP của Web Server với một tên miền.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bảo mật Web Server
&lt;ul&gt;
&lt;li&gt;Chỉ mở các cổng cần thiết.
&lt;ul&gt;
&lt;li&gt;Cho phép máy chủ web phản hồi các yêu cầu đến từ:
&lt;ul&gt;
&lt;li&gt;80 cho HTTP.&lt;/li&gt;
&lt;li&gt;443 cho HTTPS.&lt;/li&gt;
&lt;li&gt;22 cho SSH đến chỉ các IP có trong danh sách cho phép.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ngăn Web Server có các kết nối ra.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mở-rộng-thiết-kế&#34;&gt;Mở rộng thiết kế&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://truongnh28.github.io/p/system-design-project/system_design_scaling.drawio.png&#34;
	width=&#34;741&#34;
	height=&#34;1031&#34;
	srcset=&#34;https://truongnh28.github.io/p/system-design-project/system_design_scaling.drawio_hu9c15ff5442f6fcb8cd2027b6cc1adebb_110670_480x0_resize_box_3.png 480w, https://truongnh28.github.io/p/system-design-project/system_design_scaling.drawio_hu9c15ff5442f6fcb8cd2027b6cc1adebb_110670_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Bản thiết kế với số lượng người dùng lớn&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;172px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mở rộng Web Server theo horizontal scaling.
&lt;ul&gt;
&lt;li&gt;Sử dụng nhiều Web Server.&lt;/li&gt;
&lt;li&gt;Thêm các Load Balancer như HAProxy.&lt;/li&gt;
&lt;li&gt;Mở rộng SQL theo dạng phân tán.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ta sử dụng CDN
&lt;ul&gt;
&lt;li&gt;Sử dụng Object Store để quản lý nội dung tĩnh.
&lt;ul&gt;
&lt;li&gt;Khả năng mở rộng cao và đáng tin cậy.&lt;/li&gt;
&lt;li&gt;Mã hóa phía máy chủ.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Di chuyển các nội dung tĩnh vào đây:
&lt;ul&gt;
&lt;li&gt;User file.&lt;/li&gt;
&lt;li&gt;JS.&lt;/li&gt;
&lt;li&gt;CSS.&lt;/li&gt;
&lt;li&gt;Hình ảnh.&lt;/li&gt;
&lt;li&gt;Video.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thêm một Memory Caching (Redis)
&lt;ul&gt;
&lt;li&gt;Data được truy cập thường xuyên từ database.&lt;/li&gt;
&lt;li&gt;Data session từ Web Server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mở rộng Database
&lt;ul&gt;
&lt;li&gt;Chỉ lưu trữ dữ liệu trong một khoảng thời gian giới hạn trong cơ sở dữ liệu, trong khi lưu trữ phần còn lại trong một kho dữ liệu chẳng hạn như Redshift.
&lt;ul&gt;
&lt;li&gt;Một kho dữ liệu như Redshift có thể thoải mái xử lý giới hạn 1 TB nội dung mới mỗi tháng.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Với 200 yêu cầu đọc trung bình mỗi giây, lưu lượng đọc cho nội dung phổ biến có thể được giải quyết bằng cách mở rộng Bộ nhớ cache , điều này cũng hữu ích để xử lý lưu lượng truy cập được phân bổ không đồng đều và lưu lượng truy cập tăng đột biến.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bảo mật hệ thống
&lt;ul&gt;
&lt;li&gt;Mã hóa dữ liệu khi chuyển tiếp và ở trạng thái nghỉ.&lt;/li&gt;
&lt;li&gt;Sử dụng VPC(Virtual Private Cloud)
&lt;ul&gt;
&lt;li&gt;Tạo một mạng con công cộng cho Web Server duy nhất để nó có thể gửi và nhận lưu lượng truy cập từ internet.&lt;/li&gt;
&lt;li&gt;Tạo một mạng con riêng cho mọi thứ khác, ngăn chặn sự truy cập từ bên ngoài.&lt;/li&gt;
&lt;li&gt;Chỉ mở các cổng từ các IP có trong danh sách cho phép cho phép.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sắp tới mình sẽ có một bản demo về vấn đề này ở &lt;a class=&#34;link&#34; href=&#34;https://github.com/truongnh28&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;link này&lt;/strong&gt;&lt;/a&gt;. Mình sẽ cố gắng cập nhật sớm nhất.&lt;/p&gt;
&lt;h2 id=&#34;kết-luận&#34;&gt;Kết luận&lt;/h2&gt;
&lt;p&gt;Trên đây chỉ là hiểu biết của mình thông qua việc tìm hiểu module System Design, bản thân mình cũng hi vọng nhận được sự những chia sẻ cũng như thảo luận từ phía các bạn để hoàn thiện hơn. Xin cảm ơn.&lt;/p&gt;
&lt;h2 id=&#34;tham-khảo&#34;&gt;Tham khảo&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/donnemartin/system-design-primer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;system-design-primer&lt;/a&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
        </item>
        
    </channel>
</rss>
